{
  "name": "ts-type-hidden",
  "publisher": "xlboy",
  "displayName": "TS Type Hidden",
  "version": "0.6.0",
  "description": "Hide those familiar type codes! Get the snippet back to its simplest form!",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/xlboy/ts-type-hidden"
  },
  "categories": [
    "Other"
  ],
  "main": "./dist/index.js",
  "icon": "res/logo.png",
  "files": [
    "dist/**/*",
    "res/**/*"
  ],
  "engines": {
    "vscode": "^1.70.0",
    "node": ">=17.0.0"
  },
  "packageManager": "pnpm@8.15.0",
  "activationEvents": [
    "onStartupFinished"
  ],
  "contributes": {
    "commands": [
      {
        "command": "ts-type-hidden.toogle",
        "title": "TS Type Hidden: Toggle Hidden Mode",
        "when": "resourceLangId == 'typescript' || resourceLangId == 'typescriptreact'"
      },
      {
        "command": "ts-type-hidden.open",
        "title": "TS Type Hidden: Open Hidden Mode",
        "when": "resourceLangId == 'typescript' || resourceLangId == 'typescriptreact'"
      },
      {
        "command": "ts-type-hidden.close",
        "title": "TS Type Hidden: Close Hidden Mode",
        "when": "resourceLangId == 'typescript' || resourceLangId == 'typescriptreact'"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "TS Type Hidden",
      "properties": {
        "ts-type-hidden.enable": {
          "type": "boolean",
          "default": true,
          "description": "Enable this extension"
        },
        "ts-type-hidden.typeIconPath": {
          "type": "string",
          "description": "The path to the Icon file next to a line of type code"
        },
        "ts-type-hidden.ignoreTypeKinds": {
          "type": "array",
          "default": [],
          "items": {
            "type": "string",
            "enum": [
              "type-alias",
              "interface",
              "function-overload",
              "function-return",
              "function-type-predicate",
              "function-parameter",
              "function-generic-definition",
              "function-call-generic",
              "tsx-component-generic",
              "class-property-type-definition",
              "angle-brackets-assertion",
              "as-assertion",
              "satisfies-operator",
              "declare-statement",
              "variable-type-definition",
              "type-only-import-declaration",
              "import-specifier-declaration",
              "type-only-export-declaration",
              "export-specifier-declaration"
            ],
            "markdownEnumDescriptions": [
              "```ts \ntype A  = ({ ... } & { ... }) | string[] \n```\n ‚è≠Ô∏è  `type A = ({ ... } & { ... }) | string[]`",
              "```ts \ninterface A { ... } \n```\n ‚è≠Ô∏è  `interface A { ... }`",
              "```ts \nfunction fn(a: number): number[];\nfunction fn(a: number[], opts: { ... }): number[]; \n```\n ‚è≠Ô∏è  `function fn(a: number): number[];`\n\n ‚è≠Ô∏è `function fn(a: number[], opts: { ... }): number[];`",
              "```ts \nfunction fn(): number {};\n``` \n ‚è≠Ô∏è  `: number`",
              "```ts \nfunction fn(a: any): a is number {};\n```\n ‚è≠Ô∏è  `: a is number`",
              "```ts \nfunction fn<A extends string>(a: A, b: number) {};\n``` \n ‚è≠Ô∏è  `: A` \n\n ‚è≠Ô∏è  `: number`",
              "```ts \nfunction fn<A extends string, B = [A, '']>() {};\n``` \n ‚è≠Ô∏è  `<A extends string, B = [A, '']>`",
              "```ts \nconst name = get<UserModule>(userModule, 'info.name');\nconst userModel = new UserModel<UserEntity>({ ... }); \n``` \n ‚è≠Ô∏è  `<UserModule>`\n\n ‚è≠Ô∏è  `<UserEntity>`",
              "```ts \nconst EditUserForm = <ProForm<UserModel> id={userId} />;\n```\n ‚è≠Ô∏è  `<UserModel>`",
              "```ts \nclass A {\n  public size?: number;\n  private setSize!: Function = () => {}\n}\n```\n ‚è≠Ô∏è  `?: number` \n\n ‚è≠Ô∏è  `!: Function`",
              "```ts \nconst num: any = 77;\nconst num1 = (<number>num).toFixed(2);\n``` \n ‚è≠Ô∏è  `<number>`",
              "```ts \nfn() as any;\n``` \n ‚è≠Ô∏è  ` as any`",
              "```ts \nconst user = { ... } satisfies UserModel;\n``` \n ‚è≠Ô∏è  ` satisfies UserModel`",
              "```ts \ndeclare const a: number;\ndeclare function b(): number;\ndeclare class c {}\ndeclare module d {}\ndeclare namespace e {}\ndeclare enum f {}\ndeclare global {}\ndeclare module 'g' {}\n``` \n ‚è≠Ô∏è üëÜ All statements that begin with `declare`",
              "```ts \nconst a: number = 1;\n``` \n ‚è≠Ô∏è  `: number`",
              "```ts \nimport type { ... } from 'a';\n``` \n ‚è≠Ô∏è  `import type { ... } from 'a';`",
              "```ts \nimport type * as a from 'a';\n``` \n ‚è≠Ô∏è  `import type * as a from 'a';`",
              "```ts \nimport {type a1} from 'a';\n``` \n ‚è≠Ô∏è  `type a1`",
              "```ts \nexport type { ... } from 'b';\n``` \n ‚è≠Ô∏è  `export type { ... } from 'b';`",
              "```ts \nexport type * from 'b';\n``` \n ‚è≠Ô∏è  `export type * from 'b';`",
              "```ts \nexport {type b1} from 'b';\n``` \n ‚è≠Ô∏è  `type b1`"
            ]
          },
          "description": "Type kind to ignore when hiding"
        }
      }
    },
    "keybindings": [
      {
        "command": "ts-type-hidden.toogle",
        "key": "ctrl+shift+t",
        "mac": "cmd+shift+t",
        "when": "editorTextFocus && resourceLangId == 'typescript' || resourceLangId == 'typescriptreact'"
      }
    ]
  },
  "scripts": {
    "build": "run-s type-check test && tsup",
    "dev": "tsup --watch src",
    "test": "vitest run",
    "type-check": "tsc",
    "vsce-package": "run-s build && tsx scripts/vsce-package",
    "vsce-publish": "run-s build && tsx scripts/vsce-package --publish"
  },
  "devDependencies": {
    "@types/fs-extra": "^11.0.4",
    "@types/glob": "^8.1.0",
    "@types/lodash-es": "^4.17.12",
    "@types/mocha": "^10.0.1",
    "@types/vscode": "^1.70.0",
    "@vscode/test-electron": "^2.3.0",
    "execa": "^9.5.1",
    "fs-extra": "^11.2.0",
    "glob": "^11.0.0",
    "lodash-es": "^4.17.21",
    "mocha": "^10.8.2",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.3.3",
    "tsup": "^8.3.5",
    "tsx": "^3.12.7",
    "type-fest": "^4.27.0",
    "typescript": "^5.6.3",
    "vitest": "^2.1.5",
    "vsce": "^2.15.0"
  }
}
